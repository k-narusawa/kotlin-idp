import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext {
        kotlinVersion = '1.8.21'
        kotlinxCoroutinesCoreVersion = '1.7.3'
        jibVersion = '3.3.2'
        springBootVersion = '3.1.0'
        springSecurityVersion = '6.1.1'
        springSecurity6Version = '3.1.1.RELEASE'
        springJdbcVersion = '6.0.10'
        bootStrapVersion = '5.3.0'
        googleauthVersion = '1.5.0'
        zxingVersion = '3.5.2'
        jacksonVersion = '2.15.2'
        dynamodbSdkVersion = '1.12.546'
        sesSdkVersion = '1.12.554'
        mysqlConnectorJavaVersion = '8.0.33'
        hikariCpVersion = '5.0.1'
        flywayVersion = '9.19.4'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlinVersion}"
    id 'com.google.cloud.tools.jib' version "${jibVersion}"
    id 'jacoco'
}

group = 'com.knarusawa.demo.idp'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation "org.springframework.data:spring-data-jpa:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-authorization-server:${springBootVersion}"
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity6:${springSecurity6Version}"
    implementation "com.warrenstrange:googleauth:${googleauthVersion}"
    implementation "com.google.zxing:core:${zxingVersion}"
    implementation "com.google.zxing:javase:${zxingVersion}"
    implementation "org.webjars:bootstrap:${bootStrapVersion}"
    implementation "com.amazonaws:aws-java-sdk-dynamodb:${dynamodbSdkVersion}"
    implementation "com.amazonaws:aws-java-sdk-ses:${sesSdkVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinxCoroutinesCoreVersion}"
    implementation "mysql:mysql-connector-java:${mysqlConnectorJavaVersion}"
    implementation "org.springframework:spring-jdbc:${springJdbcVersion}"
    implementation "com.zaxxer:HikariCP:${hikariCpVersion}"
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.flywaydb:flyway-mysql:${flywayVersion}"
    implementation "org.springframework.security:spring-security-cas:${springSecurityVersion}"
    implementation "org.webjars:popper.js:2.9.3"

    runtimeOnly 'org.jetbrains.kotlin:kotlin-reflect:1.8.22'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.mockk:mockk:1.13.5'
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jib {
    from {
        image = 'openjdk:alpine'
    }
    to {
        image = 'registry.hub.docker.com/19992240/kotlin-idp'
        tags = ['latest']
    }
    container {
        jvmFlags = [
                '-Xms512m',
                '-Xdebug'
        ]
        ports = ['8080']
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
